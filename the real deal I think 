
Action: file_editor create /app/GITHUB_READY_CODE.md --file-text "# USDC Payment Website - GitHub Ready Code

## 📁 Project Structure

```
your-project/
├── frontend/
│   ├── src/
│   │   ├── App.js
│   │   ├── App.css
│   │   ├── index.js
│   │   └── index.css
│   ├── package.json
│   └── .env
├── backend/
│   ├── server.py
│   ├── requirements.txt
│   └── .env
└── README.md
```

---

## 🎨 Frontend Files

### 📄 `frontend/src/App.js`

```javascript
import { useState, useEffect } from \"react\";
import \"./App.css\";
import { BrowserRouter, Routes, Route } from \"react-router-dom\";
import { ethers } from \"ethers\";
import axios from \"axios\";
import { Button } from \"./components/ui/button\";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from \"./components/ui/alert-dialog\";
import { Separator } from \"./components/ui/separator\";
import { 
  Wallet, 
  ArrowRight, 
  CheckCircle2, 
  Loader2, 
  ExternalLink, 
  Download, 
  Copy, 
  Check 
} from \"lucide-react\";
import { toast } from \"sonner\";

// ============================================
// 🔧 CUSTOMIZATION SECTION - EDIT THESE VALUES
// ============================================

// Your receiving wallet address (CHANGE THIS)
const RECIPIENT_ADDRESS = \"0xc5a044eF36014c66887BAD57e4B56545ed29B5dD\";

// Payment amount in USDC (CHANGE THIS)
const PAYMENT_AMOUNT = \"1\";

// Network settings (CHANGE IF NEEDED)
const NETWORK_CONFIG = {
  chainId: \"0x89\", // Polygon = 0x89, Ethereum = 0x1, BSC = 0x38
  chainName: \"Polygon Mainnet\",
  nativeCurrency: {
    name: \"MATIC\",
    symbol: \"MATIC\",
    decimals: 18
  },
  rpcUrls: [\"https://polygon-rpc.com/\"],
  blockExplorerUrls: [\"https://polygonscan.com/\"],
  blockExplorerName: \"PolygonScan\"
};

// USDC Contract addresses by network (CHANGE IF USING DIFFERENT NETWORK)
const USDC_CONTRACTS = {
  \"0x89\": \"0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359\", // Polygon
  \"0x1\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",   // Ethereum
  \"0x38\": \"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\"   // BSC
};

const USDC_CONTRACT_ADDRESS = USDC_CONTRACTS[NETWORK_CONFIG.chainId];

// Backend API URL (OPTIONAL - comment out if not using backend)
const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:8001\";
const API = `${BACKEND_URL}/api`;

// ============================================
// END CUSTOMIZATION SECTION
// ============================================

// USDC ABI - minimal for transfer function
const USDC_ABI = [
  \"function transfer(address to, uint256 amount) public returns (bool)\",
  \"function balanceOf(address account) public view returns (uint256)\",
  \"function decimals() public view returns (uint8)\"
];

const Home = () => {
  const [account, setAccount] = useState(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [txHash, setTxHash] = useState(null);
  const [isSuccess, setIsSuccess] = useState(false);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [transactionDetails, setTransactionDetails] = useState(null);
  const [copiedField, setCopiedField] = useState(null);

  const connectWallet = async () => {
    if (!window.ethereum) {
      toast.error(\"Please install MetaMask to continue\");
      return;
    }

    setIsConnecting(true);
    try {
      // Request account access
      const accounts = await window.ethereum.request({
        method: \"eth_requestAccounts\"
      });

      // Check if we're on the correct network
      const chainId = await window.ethereum.request({ method: \"eth_chainId\" });
      
      if (chainId !== NETWORK_CONFIG.chainId) {
        try {
          // Try to switch to the correct network
          await window.ethereum.request({
            method: \"wallet_switchEthereumChain\",
            params: [{ chainId: NETWORK_CONFIG.chainId }]
          });
        } catch (switchError) {
          // This error code indicates that the chain has not been added to MetaMask
          if (switchError.code === 4902) {
            try {
              await window.ethereum.request({
                method: \"wallet_addEthereumChain\",
                params: [NETWORK_CONFIG]
              });
            } catch (addError) {
              toast.error(`Failed to add ${NETWORK_CONFIG.chainName}`);
              setIsConnecting(false);
              return;
            }
          } else {
            toast.error(`Failed to switch to ${NETWORK_CONFIG.chainName}`);
            setIsConnecting(false);
            return;
          }
        }
      }

      setAccount(accounts[0]);
      toast.success(\"Wallet connected successfully!\");
    } catch (error) {
      console.error(\"Error connecting wallet:\", error);
      toast.error(\"Failed to connect wallet\");
    }
    setIsConnecting(false);
  };

  const initiatePayment = () => {
    if (!account) {
      toast.error(\"Please connect your wallet first\");
      return;
    }
    setShowConfirmDialog(true);
  };

  const sendUSDC = async () => {
    setShowConfirmDialog(false);
    setIsSending(true);
    setTxHash(null);
    setIsSuccess(false);

    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();
      const usdcContract = new ethers.Contract(USDC_CONTRACT_ADDRESS, USDC_ABI, signer);

      // Get decimals (USDC has 6 decimals)
      const decimals = await usdcContract.decimals();
      const amount = ethers.parseUnits(PAYMENT_AMOUNT, decimals);

      // Check balance
      const balance = await usdcContract.balanceOf(account);
      if (balance < amount) {
        toast.error(\"Insufficient USDC balance\");
        setIsSending(false);
        return;
      }

      // Send transaction
      toast.info(\"Please confirm the transaction in MetaMask\");
      const tx = await usdcContract.transfer(RECIPIENT_ADDRESS, amount);
      
      setTxHash(tx.hash);
      toast.info(\"Transaction submitted! Waiting for confirmation...\");
      
      // Wait for transaction to be mined
      const receipt = await tx.wait();
      
      // Store transaction details for receipt
      const timestamp = new Date();
      const txDetails = {
        txHash: tx.hash,
        from: account,
        to: RECIPIENT_ADDRESS,
        amount: PAYMENT_AMOUNT,
        timestamp: timestamp.toISOString(),
        blockNumber: receipt.blockNumber,
        gasUsed: receipt.gasUsed.toString(),
        network: NETWORK_CONFIG.chainName
      };
      
      setTransactionDetails(txDetails);
      
      // OPTIONAL: Log transaction to backend (comment out if not using backend)
      try {
        await axios.post(`${API}/transactions`, {
          tx_hash: tx.hash,
          from_address: account,
          to_address: RECIPIENT_ADDRESS,
          amount: PAYMENT_AMOUNT,
          network: NETWORK_CONFIG.chainName,
          block_number: receipt.blockNumber
        });
      } catch (logError) {
        console.error(\"Failed to log transaction to backend:\", logError);
        // Don't show error to user as payment was successful
      }
      
      setIsSuccess(true);
      toast.success(\"Payment successful! Thank you!\");
    } catch (error) {
      console.error(\"Error sending USDC:\", error);
      if (error.code === 4001) {
        toast.error(\"Transaction rejected\");
      } else if (error.code === \"INSUFFICIENT_FUNDS\") {
        toast.error(`Insufficient ${NETWORK_CONFIG.nativeCurrency.symbol} for gas fees`);
      } else {
        toast.error(\"Transaction failed. Please try again.\");
      }
    }
    setIsSending(false);
  };

  const disconnectWallet = () => {
    setAccount(null);
    setTxHash(null);
    setIsSuccess(false);
    setTransactionDetails(null);
    toast.info(\"Wallet disconnected\");
  };

  const copyToClipboard = async (text, field) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedField(field);
      toast.success(\"Copied to clipboard!\");
      setTimeout(() => setCopiedField(null), 2000);
    } catch (err) {
      toast.error(\"Failed to copy\");
    }
  };

  const downloadReceipt = () => {
    if (!transactionDetails) return;

    const receiptText = `
PAYMENT RECEIPT
═══════════════════════════════════════

Transaction Hash: ${transactionDetails.txHash}
From: ${transactionDetails.from}
To: ${transactionDetails.to}
Amount: ${transactionDetails.amount} USDC
Network: ${transactionDetails.network}
Block Number: ${transactionDetails.blockNumber}
Gas Used: ${transactionDetails.gasUsed}
Timestamp: ${new Date(transactionDetails.timestamp).toLocaleString()}

═══════════════════════════════════════
Thank you for your payment!
    `;

    const blob = new Blob([receiptText], { type: \"text/plain\" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement(\"a\");
    a.href = url;
    a.download = `receipt_${transactionDetails.txHash.slice(0, 10)}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    toast.success(\"Receipt downloaded!\");
  };

  const resetPayment = () => {
    setIsSuccess(false);
    setTxHash(null);
    setTransactionDetails(null);
  };

  // Listen for account changes
  useEffect(() => {
    if (window.ethereum) {
      window.ethereum.on(\"accountsChanged\", (accounts) => {
        if (accounts.length === 0) {
          setAccount(null);
        } else {
          setAccount(accounts[0]);
        }
      });

      window.ethereum.on(\"chainChanged\", () => {
        window.location.reload();
      });
    }

    return () => {
      if (window.ethereum) {
        window.ethereum.removeAllListeners(\"accountsChanged\");
        window.ethereum.removeAllListeners(\"chainChanged\");
      }
    };
  }, []);

  return (
    <div className=\"payment-container\">
      <div className=\"particles\">
        {[...Array(20)].map((_, i) => (
          <div key={i} className=\"particle\" style={{
            left: `${Math.random() * 100}%`,
            animationDelay: `${Math.random() * 5}s`,
            animationDuration: `${5 + Math.random() * 10}s`
          }} />
        ))}
      </div>

      <div className=\"content-wrapper\">
        <div className=\"payment-card\" data-testid=\"payment-card\">
          <div className=\"card-glow\" />
          
          <div className=\"logo-section\">
            <div className=\"logo-circle\">
              <Wallet className=\"logo-icon\" size={32} />
            </div>
          </div>

          <h1 className=\"title\" data-testid=\"page-title\">USDC Payment</h1>
          <p className=\"subtitle\" data-testid=\"page-subtitle\">
            Send {PAYMENT_AMOUNT} USDC on {NETWORK_CONFIG.chainName}
          </p>

          <div className=\"amount-display\" data-testid=\"amount-display\">
            <div className=\"amount-value\">{parseFloat(PAYMENT_AMOUNT).toFixed(2)}</div>
            <div className=\"amount-currency\">USDC</div>
          </div>

          {!account ? (
            <Button
              onClick={connectWallet}
              disabled={isConnecting}
              className=\"connect-button\"
              data-testid=\"connect-wallet-button\"
            >
              {isConnecting ? (
                <>
                  <Loader2 className=\"animate-spin\" size={20} />
                  Connecting...
                </>
              ) : (
                <>
                  <Wallet size={20} />
                  Connect Wallet
                  <ArrowRight size={20} />
                </>
              )}
            </Button>
          ) : (
            <div className=\"connected-section\">
              <div className=\"wallet-info\" data-testid=\"wallet-info\">
                <div className=\"wallet-label\">Connected</div>
                <div className=\"wallet-address\">
                  {account.slice(0, 6)}...{account.slice(-4)}
                </div>
              </div>

              {isSuccess && transactionDetails ? (
                <div className=\"receipt-section\" data-testid=\"receipt-section\">
                  <div className=\"success-icon\">
                    <CheckCircle2 size={48} />
                  </div>
                  <h3 className=\"success-title\">Payment Successful!</h3>
                  <p className=\"success-message\">Thank you for your payment</p>

                  <div className=\"receipt-details\">
                    <div className=\"receipt-header\">
                      <h4>Transaction Receipt</h4>
                    </div>
                    
                    <div className=\"receipt-item\">
                      <span className=\"receipt-label\">Transaction Hash</span>
                      <div className=\"receipt-value-row\">
                        <span className=\"receipt-value hash\">
                          {transactionDetails.txHash.slice(0, 10)}...{transactionDetails.txHash.slice(-8)}
                        </span>
                        <button
                          onClick={() => copyToClipboard(transactionDetails.txHash, 'txHash')}
                          className=\"copy-btn\"
                          data-testid=\"copy-tx-hash\"
                        >
                          {copiedField === 'txHash' ? <Check size={16} /> : <Copy size={16} />}
                        </button>
                      </div>
                    </div>

                    <Separator className=\"receipt-separator\" />

                    <div className=\"receipt-item\">
                      <span className=\"receipt-label\">From</span>
                      <div className=\"receipt-value-row\">
                        <span className=\"receipt-value\">
                          {transactionDetails.from.slice(0, 8)}...{transactionDetails.from.slice(-6)}
                        </span>
                        <button
                          onClick={() => copyToClipboard(transactionDetails.from, 'from')}
                          className=\"copy-btn\"
                          data-testid=\"copy-from-address\"
                        >
                          {copiedField === 'from' ? <Check size={16} /> : <Copy size={16} />}
                        </button>
                      </div>
                    </div>

                    <div className=\"receipt-item\">
                      <span className=\"receipt-label\">To</span>
                      <div className=\"receipt-value-row\">
                        <span className=\"receipt-value\">
                          {transactionDetails.to.slice(0, 8)}...{transactionDetails.to.slice(-6)}
                        </span>
                        <button
                          onClick={() => copyToClipboard(transactionDetails.to, 'to')}
                          className=\"copy-btn\"
                          data-testid=\"copy-to-address\"
                        >
                          {copiedField === 'to' ? <Check size={16} /> : <Copy size={16} />}
                        </button>
                      </div>
                    </div>

                    <Separator className=\"receipt-separator\" />

                    <div className=\"receipt-item\">
                      <span className=\"receipt-label\">Amount</span>
                      <span className=\"receipt-value highlight\">{transactionDetails.amount} USDC</span>
                    </div>

                    <div className=\"receipt-item\">
                      <span className=\"receipt-label\">Network</span>
                      <span className=\"receipt-value\">{transactionDetails.network}</span>
                    </div>

                    <div className=\"receipt-item\">
                      <span className=\"receipt-label\">Block Number</span>
                      <span className=\"receipt-value\">{transactionDetails.blockNumber}</span>
                    </div>

                    <div className=\"receipt-item\">
                      <span className=\"receipt-label\">Timestamp</span>
                      <span className=\"receipt-value\">
                        {new Date(transactionDetails.timestamp).toLocaleString()}
                      </span>
                    </div>
                  </div>

                  <div className=\"receipt-actions\">
                    <a
                      href={`${NETWORK_CONFIG.blockExplorerUrls[0]}/tx/${transactionDetails.txHash}`}
                      target=\"_blank\"
                      rel=\"noopener noreferrer\"
                      className=\"receipt-btn primary\"
                      data-testid=\"view-on-explorer\"
                    >
                      <ExternalLink size={18} />
                      View on {NETWORK_CONFIG.blockExplorerName}
                    </a>
                    <button
                      onClick={downloadReceipt}
                      className=\"receipt-btn secondary\"
                      data-testid=\"download-receipt\"
                    >
                      <Download size={18} />
                      Download Receipt
                    </button>
                  </div>

                  <button
                    onClick={resetPayment}
                    className=\"new-payment-btn\"
                    data-testid=\"new-payment-button\"
                  >
                    Make Another Payment
                  </button>
                </div>
              ) : (
                <Button
                  onClick={initiatePayment}
                  disabled={isSending}
                  className=\"pay-button\"
                  data-testid=\"pay-button\"
                >
                  {isSending ? (
                    <>
                      <Loader2 className=\"animate-spin\" size={20} />
                      {txHash ? \"Confirming...\" : \"Sending...\"}
                    </>
                  ) : (
                    <>
                      Send Payment
                      <ArrowRight size={20} />
                    </>
                  )}
                </Button>
              )}

              <button
                onClick={disconnectWallet}
                className=\"disconnect-button\"
                data-testid=\"disconnect-button\"
              >
                Disconnect
              </button>
            </div>
          )}

          <div className=\"network-badge\" data-testid=\"network-badge\">
            <div className=\"network-dot\" />
            {NETWORK_CONFIG.chainName}
          </div>
        </div>

        <div className=\"footer-info\">
          <p>Secure payment powered by {NETWORK_CONFIG.chainName} blockchain</p>
        </div>
      </div>

      {/* Confirmation Dialog */}
      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
        <AlertDialogContent className=\"confirmation-dialog\" data-testid=\"confirmation-dialog\">
          <AlertDialogHeader>
            <AlertDialogTitle className=\"dialog-title\">
              Confirm Payment
            </AlertDialogTitle>
            <AlertDialogDescription className=\"dialog-description\">
              Please review the payment details before confirming.
            </AlertDialogDescription>
          </AlertDialogHeader>
          
          <div className=\"confirmation-details\">
            <div className=\"confirm-item\">
              <span className=\"confirm-label\">Amount</span>
              <span className=\"confirm-value highlight\">{parseFloat(PAYMENT_AMOUNT).toFixed(2)} USDC</span>
            </div>
            <Separator />
            <div className=\"confirm-item\">
              <span className=\"confirm-label\">From</span>
              <span className=\"confirm-va


Perfect! Now let me create a simpler, more focused README for quick reference:
Action: file_editor create /app/QUICK_SETUP_GUIDE.md --file-text "# 🚀 Quick Setup Guide - USDC Payment Website

## ⚡ 3-Minute Setup

### Step 1: Install Dependencies
```bash
npm install ethers axios lucide-react sonner @radix-ui/react-alert-dialog @radix-ui/react-separator react-router-dom
```

### Step 2: Copy Files
Copy these files to your React project:
- `src/App.js` (main application)
- `src/App.css` (styles)
- `src/index.js` (entry point)

### Step 3: Configure (IMPORTANT!)

Open `src/App.js` and find the **CUSTOMIZATION SECTION** (around line 30):

```javascript
// 🔧 CHANGE THESE VALUES:

// Your wallet address - WHERE YOU RECEIVE PAYMENTS
const RECIPIENT_ADDRESS = \"0xYOUR_WALLET_ADDRESS_HERE\";

// How much USDC to charge
const PAYMENT_AMOUNT = \"1\";  // Change to \"5\" for $5, \"10\" for $10, etc.

// Which blockchain network to use
const NETWORK_CONFIG = {
  chainId: \"0x89\",              // Polygon (cheap fees)
  chainName: \"Polygon Mainnet\",
  // ... rest stays the same for Polygon
};
```

### Step 4: Run
```bash
npm start
```

Visit `http://localhost:3000` and you're done! 🎉

---

## 🎨 Easy Customizations

### Change Payment Amount
```javascript
const PAYMENT_AMOUNT = \"10\";  // Now charges $10 USDC
```

### Change to Ethereum Network
```javascript
const NETWORK_CONFIG = {
  chainId: \"0x1\",
  chainName: \"Ethereum Mainnet\",
  nativeCurrency: { name: \"ETH\", symbol: \"ETH\", decimals: 18 },
  rpcUrls: [\"https://mainnet.infura.io/v3/YOUR_KEY\"],
  blockExplorerUrls: [\"https://etherscan.io/\"],
  blockExplorerName: \"Etherscan\"
};

// Also update USDC contract:
const USDC_CONTRACT_ADDRESS = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";
```

### Change Colors (App.css)
```css
:root {
  --primary-color: #ff6b6b;  /* Red theme */
  --secondary-color: #ee5a6f;
  --success-color: #51cf66;
}
```

### Change Title & Subtitle (App.js)
Find around line 460:
```javascript
<h1 className=\"title\">Your Custom Title</h1>
<p className=\"subtitle\">Your custom description</p>
```

---

## 🌐 Supported Networks

| Network | Chain ID | Gas Fees | USDC Contract |
|---------|----------|----------|---------------|
| **Polygon** (Recommended) | `0x89` | ~$0.01 | `0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359` |
| Ethereum | `0x1` | ~$5-20 | `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48` |
| BSC | `0x38` | ~$0.10 | `0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d` |
| Base | `0x2105` | ~$0.01 | `0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913` |

💡 **Tip**: Polygon is recommended for low fees!

---

## ✅ Checklist Before Going Live

- [ ] Updated `RECIPIENT_ADDRESS` to your wallet
- [ ] Set correct `PAYMENT_AMOUNT`
- [ ] Verified network is correct (Polygon = `0x89`)
- [ ] Tested with MetaMask on testnet first
- [ ] Customized title and colors (optional)
- [ ] Verified USDC contract address for your network

---

## 🧪 Test on Testnet First!

### Polygon Mumbai Testnet
```javascript
const NETWORK_CONFIG = {
  chainId: \"0x13881\",
  chainName: \"Polygon Mumbai\",
  nativeCurrency: { name: \"MATIC\", symbol: \"MATIC\", decimals: 18 },
  rpcUrls: [\"https://rpc-mumbai.maticvigil.com/\"],
  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]
};

// Mumbai USDC: 0x0FA8781a83E46826621b3BC094Ea2A0212e71B23
```

Get testnet MATIC & USDC from faucets:
- https://faucet.polygon.technology/
- https://mumbaifaucet.com/

---

## 🐛 Common Issues

### \"Insufficient USDC balance\"
- User doesn't have enough USDC in their wallet
- Make sure they're on the correct network

### \"Insufficient [TOKEN] for gas fees\"
- User needs native token (MATIC, ETH, BNB) for gas
- On Polygon, they need ~0.01 MATIC

### \"Wrong network\"
- App will auto-prompt to switch networks
- User just needs to approve in MetaMask

### MetaMask doesn't open
- Make sure MetaMask extension is installed
- Try refreshing the page

---

## 📦 What You Get

✅ Wallet connection with MetaMask  
✅ Auto network switching  
✅ Payment confirmation dialog  
✅ Transaction receipts with copy/download  
✅ Real-time status updates  
✅ Beautiful animated UI  
✅ Mobile responsive  
✅ Production ready  

---

## 🔒 Security Notes

- ✅ All transactions happen on-chain (secure)
- ✅ No private keys stored anywhere
- ✅ User approves each transaction in MetaMask
- ✅ Smart contract handles the transfer
- ❌ Never ask users for private keys or seed phrases

---

## 💡 Pro Tips

1. **Start with Polygon** - cheapest fees (~$0.01)
2. **Test on testnet first** - use Mumbai for Polygon
3. **Keep it simple** - users like one-click payments
4. **Add your logo** - replace the wallet icon in `logo-circle`
5. **Customize colors** - match your brand

---

## 📞 Need Help?

1. Check the full code in `GITHUB_READY_CODE.md`
2. All code is commented and ready to customize
3. Each section has clear markers for what to change

---

Made with ❤️ - Ready to accept crypto payments!
"
Observation: Create successful: /app/QUICK_SETUP_GUIDE.md